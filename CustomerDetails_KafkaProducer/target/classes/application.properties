server.port=8089


# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

#spring.datasource.url = jdbc:postgresql://aa7hkq2ak102hs.cffdntc8bzdh.us-east-1.rds.amazonaws.com:5432/ebdb
#spring.datasource.url =jdbc:postgresql://mydbinstance.cffdntc8bzdh.us-east-1.rds.amazonaws.com/postgresdb
#spring.datasource.url =jdbc:postgresql://some-postgres:5432/postgres
spring.datasource.url =jdbc:postgresql://localhost:5432/postgres
spring.datasource.driver-class-name = org.postgresql.Driver

# Username and password
spring.datasource.username = postgres
spring.datasource.password = mysecretpassword

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update


# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

#Kafka properties
spring.cloud.stream.bindings.addCustomerDetailsOutput.destination=addCustomerDetails
spring.cloud.stream.bindings.addCustomerDetailsOutput.content-type=application/json


spring.cloud.stream.bindings.updateCustomerDetailsOutput.destination=updateCustomerDetails
spring.cloud.stream.bindings.updateCustomerDetailsOutput.content-type=application/json


#spring.cloud.stream.kafka.binder.zkNodes=01hw543154:2181
#spring.cloud.stream.kafka.binder.brokers=01hw543154:9092
spring.cloud.stream.kafka.binder.zkNodes=localhost:2181
spring.cloud.stream.kafka.binder.brokers=localhost:9092




#spring.cloud.stream.kafka.binder.zkNodes=01HW614633 :2181
#spring.cloud.stream.kafka.binder.brokers=01HW614633 :9092


spring.cloud.stream.kafka.bindings.input.consumer.autoCommitOffset=false
spring.cloud.stream.kafka.binder.autoAddPartitions=true
spring.cloud.stream.kafka.binder.autoCreateTopics=true


